object relational mapper
Map data from DB to object in program
We will use Entity Framework Core
b/c .Net Core became used instead of .NET framework for expanded use
Entity framework vs. entity framework core
ex. EF 6 =/= EF Core!      

DBContext

code first
dotnet ef migrations add<name of migration> -c <implemented db-context> --startup project <location of startup proj>
dotnet ef database update --startup-project <loc of startup proj>

db first ef core
install ef core design and psql to both projects
(DAL and startup)
run long code

add connectionstring to gitignore -> type file to be ignored (ex. appsettings.json)
".gitignore" is gitignore file -> git add .gitignore
[Mm]igrations/

json file in main folder
{
	"ConnectionStrings":
	{
		"HerosDB":"Host=;Port=;Database=;Username=;Password=;"
	}
}

To DB and UI              :
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Npsql.EntityFrameworkCore.PostgreSql
dotnet add package Microsoft.Extensions.Configuration.Json
dotnet ef

do once:
dotnet tool install --global dotnet-ef

: DbContext in HerosContext

============================================================
sql = structured language vs. c# = obj oriented language

ddl = create, alter, drop
(data definition language)

dml = select, insert, update, delete
(data manipulation language)

tcl = commit, savepoint, rollback, transact
(transaction control language)

dialects have four to five sublanguages
sublanguages ->
DQL (select)
DDL (create / alter / drop / truncate / rename)
	truncate removes all data (not structure and can't rollback), delete row (can rollback), drop table
DML (insert / update / de;ete)
TCL (commit / rollback / savepoint)
DCL (grant, revoke)


